# Version Control Overview



> Version control systems are a category of software tools that help a software team manage changes to source code over time. Version control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members. - [Atlassian website](https://www.atlassian.com/git/tutorials/what-is-version-control)

![Version Control Image ([source](https://web.archive.org/web/20170216074720/https://www.atlassian.com/git/tutorials/what-is-version-control))](../images/version-control.png)

**Version control** is a system that tracks changes to files over time, allowing multiple people to collaborate on projects efficiently. It enables developers to revert to previous versions, compare changes, and merge contributions seamlessly.

The importance of version control extends beyond software development; it is also used in writing, research, and design projects.

## Categories of Version Control Systems

There are two main types of version control: centralized and distributed. Centralized version control systems (CVCS), such as Subversion (SVN), use a single repository for storing all versions, while distributed version control systems (DVCS), like Git, provide each user with a complete copy of the project history, enhancing flexibility and collaboration.


## Benefits of Version Control

### Tracking Changes

Version control improves transparency and accountability by tracking who made specific modifications and when. This is particularly helpful for large-scale projects where team members need to coordinate their efforts while ensuring the integrity and stability of the codebase.

### Integrating with Workflows

Modern version control systems, especially Git, have become essential tools in software development workflows. They integrate with platforms like GitHub, GitLab, and Bitbucket, facilitating remote collaboration and continuous integration. Version control also enables automated testing and deployment, ensuring that only well-tested code is released into production. By using version control, teams can maintain efficiency, reduce errors, and create a structured development process that supports innovation and long-term project sustainability.

### Enabling Collaboration

By maintaining a detailed history of changes, version control prevents data loss and reduces conflicts when multiple contributors are working on the same files.

Version control makes collaboration easier from day one. With tools like Git, multiple people can contribute to the same codebase, track changes over time, and avoid the chaos of passing files back and forth.

:::{.callout-note title="Vignette: The Chaos Before Git"}
A [team of developers](../exercises/developer-team-collaboration/) is building a new website. One's designing the homepage, another is tweaking the layout, and a third is fixing a bug in the navigation menu. They're emailing files back and forth — like "final_version_homepage2_REALLY_FINAL.html" — hoping no one overwrites someone else's changes. Conflicts pop up. Bugs slip in. Progress slows.

That team would benefit from using version control. In this new scenario, each developer works in their own branch, pushing updates to a shared repository. They review each other's code, merge changes smoothly, and never worry about who has the “right” version of the project.

The difference? They're not just working together — they're building together, confidently and in sync.
:::

## Terminology

**Repository** (noun): A software development project. Otherwise known as a "repo". In practice, a repository is just directory of files and folders.

**Fork** (verb): To make a copy of a repository under your own control.

**Clone** (verb): To download a repository onto your local machine.

**Commit** (noun): A snapshot (version) of the repo at a specific point in time. A named version that can be rolled back to.

**Push** (verb): To upload code to GitHub.

**Pull** (verb): To download code to GitHub.

**Branch** (noun): One of many potential alternative realities / states of the repo. Default is "main".

**Pull Request** (noun): A set of proposed changes comprising one or more commits, usually made on a feature-specific branch or separate fork, and corresponding request that a repository maintainer pull / merge / adopt the code into the "main" branch. Otherwise known as a "PR".


See also this [Glossary](https://docs.github.com/en/get-started/learning-about-github/github-glossary) of GitHub terms.
