# Version Control Overview



> Version control systems are a category of software tools that help a software team manage changes to source code over time. Version control software keeps track of every modification to the code in a special kind of database. If a mistake is made, developers can turn back the clock and compare earlier versions of the code to help fix the mistake while minimizing disruption to all team members. - [Atlassian website](https://www.atlassian.com/git/tutorials/what-is-version-control)

![Version Control Image ([source](https://web.archive.org/web/20170216074720/https://www.atlassian.com/git/tutorials/what-is-version-control))](../images/version-control.png)

**Version control** is a system that tracks changes to files over time, allowing multiple people to collaborate on projects efficiently. It enables developers to revert to previous versions, compare changes, and merge contributions seamlessly.

The importance of version control extends beyond software development; it is also used in writing, research, and design projects.


## Categories of Version Control Systems

There are two main types of version control: centralized and distributed. Centralized version control systems (CVCS), such as Subversion (SVN), use a single repository for storing all versions, while distributed version control systems (DVCS), like Git, provide each user with a complete copy of the project history, enhancing flexibility and collaboration.

## Version Control Tools

By now, you may have heard terms like "Git," "GitHub," and "GitHub Desktop" — but how do these tools relate to each other?

**Git** is one of the major version control systems: a technology that enables you to track changes to your code over time, revert to earlier versions, and collaborate more effectively. You can think of Git as the underlying *way of doing things* — the foundation for performing version control.

In contrast, **online platforms** like [GitHub](http://github.com), [GitLab](https://gitlab.com), and [Bitbucket](https://bitbucket.org) implement Git and add social features, making it easier to host, discover, and collaborate on coding projects. You can think of these platforms as *shared spaces* where your code lives and where collaboration happens.

A **Git client** is another important piece of the puzzle. Git clients are tools that help you interact with Git more easily — providing a user-friendly way to manage your code history and sync changes between your local computer and platforms like GitHub. For beginners, we recommend starting with GUI tools like [GitHub Desktop](../dev-tools/git-client.qmd#github-desktop), which offer an intuitive, button-driven experience. As you become more comfortable with command-line computing, you may later transition to using [Git on the command line](../dev-tools/clis/git.qmd) for more control and flexibility.

You might notice that instead of using a Git client, it is possible to edit files directly on GitHub's website. While convenient for quick changes, it's usually easier to work locally with a separate Git client — especially when editing multiple files or larger projects. New tools like [GitHub Codespaces](https://github.com/features/codespaces) are starting to blur this line, offering powerful, cloud-based development environments. Still, today it remains common practice to use a separate Git client for everyday local development. Local development also allows you to work without needing a constant Internet connection, unlike GitHub's online editor or Codespaces. This tutorial will walk you through the process of installing, configuring, and using tools like a [text editor](../dev-tools/vs-code-text-editor.qmd) for local development.


## Benefits of Version Control

### Tracking Changes

Version control improves transparency and accountability by tracking who made specific modifications and when. This is particularly helpful for large-scale projects where team members need to coordinate their efforts while ensuring the integrity and stability of the codebase.

### Integrating with Workflows

Modern version control systems, especially Git, have become essential tools in software development workflows. They integrate with platforms like GitHub, GitLab, and Bitbucket, facilitating remote collaboration and continuous integration. Version control also enables automated testing and deployment, ensuring that only well-tested code is released into production. By using version control, teams can maintain efficiency, reduce errors, and create a structured development process that supports innovation and long-term project sustainability.

### Enabling Collaboration

By maintaining a detailed history of changes, version control prevents data loss and reduces conflicts when multiple contributors are working on the same files.

Version control makes collaboration easier from day one. With tools like Git, multiple people can contribute to the same codebase, track changes over time, and avoid the chaos of passing files back and forth.

:::{.callout-note title="Vignette: The Chaos Before Git"}
A [team of developers](../exercises/developer-team-collaboration/) is building a new website. One's designing the homepage, another is tweaking the layout, and a third is fixing a bug in the navigation menu. They're emailing files back and forth — like "final_version_homepage2_REALLY_FINAL.html" — hoping no one overwrites someone else's changes. Conflicts pop up. Bugs slip in. Progress slows.

That team would benefit from using version control. In this new scenario, each developer works in their own branch, pushing updates to a shared repository. They review each other's code, merge changes smoothly, and never worry about who has the “right” version of the project.

The difference? They're not just working together — they're building together, confidently and in sync.
:::

## Version Control Terminology

Understanding the language of version control is key to collaborating on software projects. Here's a quick reference guide to some of the most common terms:

**Repository** (noun):
A software development project, commonly referred to as a "repo". In practice, it's a directory containing files, folders, and metadata. Repositories can be hosted on online platforms like GitHub, GitLab, or Bitbucket.

→ Learn more: [About repositories](https://docs.github.com/en/repositories/creating-and-managing-repositories/about-repositories)

**Fork** (verb):
To create your own copy of an existing repository, typically under your personal account. Forks allow you to propose changes to someone else's project or use someone else's project as a starting point for your own idea.

→ Learn more: [Fork a repo](https://docs.github.com/en/get-started/quickstart/fork-a-repo)

**Clone** (verb):
To download a repository from a remote source like GitHub onto your local machine. This gives you a full copy of the code, along with its version history.

→ Learn more: [Cloning a repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository)

**Commit** (noun):
A snapshot of your project at a specific point in time. Commits are used to save your progress and track changes. Each commit has a unique ID (hash) and can be revisited or rolled back if needed.

→ Learn more: [About commits](https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/about-commits)

**Push** (verb):
To upload your local commits to a remote repository, such as GitHub. Pushing shares your changes with others.

→ Learn more: [Pushing commits](https://docs.github.com/en/get-started/using-git/pushing-commits-to-a-remote-repository)

**Pull** (verb):
To download and integrate changes from a remote repository into your local copy. This keeps your local project up-to-date with others' contributions.

→ Learn more: [Pulling changes](https://docs.github.com/en/get-started/using-git/getting-changes-from-a-remote-repository)

**Branch** (noun):
An independent line of development within a repository. Branches allow you to work on new features, bug fixes, or experiments without affecting the main codebase. The default branch is often called "main" (formerly "master").

→ Learn more: [About branches](https://docs.github.com/en/get-started/quickstart/github-glossary#branch)

**Pull Request** (noun):
A proposal to merge one set of changes (commits) from a branch or fork into another branch, usually the main development branch. Maintainers review pull requests (PRs) to discuss, approve, or request changes before merging.

→ Learn more: [About pull requests](https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/proposing-changes-to-your-work-with-pull-requests/about-pull-requests)

For a more extensive list of terms, check out GitHub's full [Glossary of Terms](https://docs.github.com/en/get-started/learning-about-github/github-glossary).

At this point, many of these terms may still feel theoretical or abstract — but as you work through the hands-on exercises in this tutorial, they will quickly become much more familiar and intuitive.
